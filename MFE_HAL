import os
import sys
baseName = os.path.basename(__file__)
dirName = os.path.dirname(__file__)
print('basename:    ', baseName)
print('dirname:     ', dirName)
sys.path.append(dirName + r'/../..')

from RFEM.enums import *
from RFEM.initModel import Model, Calculate_all, CalculateSelectedCases, ConvertToDlString, SetAddonStatus, FirstFreeIdNumber, insertSpaces
from RFEM.baseSettings import BaseSettings
from RFEM.BasicObjects.material import Material
from RFEM.BasicObjects.section import Section
from RFEM.BasicObjects.node import Node
from RFEM.BasicObjects.member import Member
from RFEM.BasicObjects.memberSet import MemberSet
from RFEM.TypesForNodes.nodalSupport import NodalSupport
from RFEM.LoadCasesAndCombinations.staticAnalysisSettings import StaticAnalysisSettings
from RFEM.LoadCasesAndCombinations.designSituation import clearAttributes, DesignSituation
from RFEM.LoadCasesAndCombinations.loadCase import LoadCase
from RFEM.LoadCasesAndCombinations.loadCombination import LoadCombination
from RFEM.LoadCasesAndCombinations.loadCasesAndCombinations import LoadCasesAndCombinations
from RFEM.LoadCasesAndCombinations.combinationWizard import CombinationWizard
from RFEM.Loads.memberLoad import MemberLoad
from RFEM.Calculate.meshSettings import GetModelInfo
# from RFEM.ImportExport.exports import ExportDetailsOfDesignToCSV
from RFEM.dataTypes import inf
from RFEM.SteelDesign.steelUltimateConfigurations import SteelDesignUltimateConfigurations
from RFEM.SteelDesign.steelServiceabilityConfiguration import SteelDesignServiceabilityConfigurations
from RFEM.TypesForSteelDesign.steelEffectiveLengths import SteelEffectiveLengths
from RFEM.Results.resultTables import ResultTables, GetMaxValue, GetMinValue
from RFEM.Results.designOverview import GetDesignOverview, GetPartialDesignOverview\

import math

if __name__ == '__main__':
    dy = float(input("H.o.h. afstand tussen assen // x-as [m]: "))
    dx = float(input("H.o.h. afstand tussen assen // y-as [m]: "))
    nx = int(input("Aantal assen in x-richting: "))
    ny = int(input("Aantal assen in y-richting: "))
    h = float(input("Hoogte hal incl. dakrand [m]: "))
    h_dr = float(input("Hoogte dakrand [m]: "))
    kst_kol = int(input("Aantal kniksteunen van de kolommen: "))
    nodes_frame = 2*(3+kst_kol)+ny-2
    members_frame = 2*(2+kst_kol)+ny-1
    sup_nodes = []
    b = (ny-1)*dy

    Model(True, "MFE_HAL")
    Model.clientModel.service.delete_all()
    Model.clientModel.service.begin_modification()
    BaseSettings(9.81, GlobalAxesOrientationType.E_GLOBAL_AXES_ORIENTATION_ZUP, LocalAxesOrientationType.E_LOCAL_AXES_ORIENTATION_ZDOWN)

    SetAddonStatus(Model.clientModel, AddOn.steel_design_active, True)

    Material(1, 'S235')
    Section(1, 'HEA 240', 1, "Profiel Kolommen 1")
    Section(2, 'HEA 200', 1, "Profiel Kolommen 2")
    Section(3, 'IPE 400', 1, "Profiel Hoofdliggers")
    Section(4, 'HEA 160', 1, "Profiel Dakliggers KOPSE GEVELS")
    Section(5, 'HEA 140', 1, "Profiel Dakliggers LANGSGEVELS")
    Section(6, 'HEA 120', 1, "Profiel Kipsteunen dak")
    Section(7, 'HEA 100', 1, "Profiel Horizontale gevelliggers KOPSE GEVELS")
    Section(8, 'HEA 100', 1, "Profiel Horizontale gevelliggers LANGSGEVELS")

    Section(9, 'HEA 100', 1, "Profiel Dakrand Verticaal")
    Section(10, 'HEA 100', 1, "Profiel Dakrand Horizontaal")

    for i in range(nx):
        n = i*nodes_frame
        m = i*members_frame

    #Kolommen op x-as maken

        Node(n+1, i*dx, 0.0, 0.0)
        sup_nodes.append(n+1)
        Members_in_Set = []

        if kst_kol >= 1:
            for k in range(kst_kol):
                Node(n+1+k+1, i*dx, 0.0, (k+1)*(h-h_dr)/(kst_kol+1))
                Member(m+k+1,n+k+1,n+1+k+1, math.radians(90) ,1,1)
                Members_in_Set.append(m+k+1)

                if i>0:
                    Member(m+nx*members_frame+2*(nx-1)+k+1,n+1+k+1-nodes_frame,n+1+k+1,math.radians(0) ,8,8)

        Node(n+kst_kol+2, i*dx, 0.0, h-h_dr)
        Member(m+kst_kol+1,n+kst_kol+1,n+kst_kol+2,math.radians(90),1,1)
        Members_in_Set.append(m+kst_kol+1)

        #Randbalk maken
        if i>0:
            Member(m+nx*members_frame+k+1,n-nodes_frame+kst_kol+2,n+kst_kol+2,math.radians(0),5,5)

        if kst_kol >= 1:
            MemberSet(FirstFreeIdNumber(ObjectTypes.E_OBJECT_TYPE_MEMBER_SET), insertSpaces(Members_in_Set),SetType.SET_TYPE_CONTINUOUS,"Kolom")

    #Kolommen op y = b maken

        Node(n+nodes_frame, i*dx, b, 0.0)
        sup_nodes.append(n+nodes_frame)
        Members_in_Set = []

        if kst_kol >= 1:
            for k in range(kst_kol):
                Node(n+nodes_frame-k-1, i*dx, b, (k+1)*(h-h_dr)/(kst_kol+1))
                Member(m+members_frame-k,n+nodes_frame-k,n+nodes_frame-k-1, math.radians(90) ,1,1)
                Members_in_Set.append(m+members_frame-k)

                if i>0:
                    Member(m+nx*members_frame+(kst_kol+3)*(nx-1)+k+1,n-k-1,n+nodes_frame-k-1,math.radians(0) ,8,8)

        Node(n+nodes_frame-kst_kol-1, i*dx, b, h-h_dr)
        Member(m+members_frame-kst_kol,n+nodes_frame-kst_kol,n+nodes_frame-kst_kol-1,math.radians(90),1,1)
        Members_in_Set.append(m+members_frame-kst_kol)

        #Randbalk maken
        if i>0:
            Member(m+nx*members_frame+1*(nx-1)+k+1,n-kst_kol-1,n+nodes_frame-kst_kol-1,math.radians(0),5,5)

        if kst_kol >= 1:
            MemberSet(FirstFreeIdNumber(ObjectTypes.E_OBJECT_TYPE_MEMBER_SET), insertSpaces(Members_in_Set),SetType.SET_TYPE_CONTINUOUS,"Kolom")

    #Hoofdliggers maken
        Members_in_Set = []
        if ny >= 3:
            Node(n+kst_kol+4, i*dx, dy, h-h_dr)
            Member(m+kst_kol+3,n+kst_kol+2,n+kst_kol+4, math.radians(0) ,1,1)
            Members_in_Set.append(m+kst_kol+3)
            for d in range(1,ny-2):
                Node(n+kst_kol+d+4, i*dx, (d+1)*dy, h-h_dr)
                Member(m+kst_kol+d+3,n+kst_kol+d+3,n+kst_kol+d+4, math.radians(0) ,1,1)
                Members_in_Set.append(m+kst_kol+d+3)
        Member(m+kst_kol+ny+1,n+kst_kol+ny+1,n+nodes_frame-kst_kol-1, math.radians(0) ,1,1)
        Members_in_Set.append(m+kst_kol+ny+1)
        if ny >= 3:
            MemberSet(FirstFreeIdNumber(ObjectTypes.E_OBJECT_TYPE_MEMBER_SET), insertSpaces(Members_in_Set),SetType.SET_TYPE_CONTINUOUS,"Hoofdligger")

    #Dakrand verticale profielen maken
        Node(n+kst_kol+3, i*dx, 0, h)
        Member(m+kst_kol+2,n+kst_kol+2,n+kst_kol+3, math.radians(90) ,9,9)

        Node(n+nodes_frame-kst_kol-2, i*dx, b, h)
        Member(m+members_frame-kst_kol-1,n+nodes_frame-kst_kol-1,n+nodes_frame-kst_kol-2,math.radians(90),9,9)



    Model.clientModel.service.finish_modification()
