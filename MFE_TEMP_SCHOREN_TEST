import os
import sys
baseName = os.path.basename(__file__)
dirName = os.path.dirname(__file__)
print('basename:    ', baseName)
print('dirname:     ', dirName)
sys.path.append(dirName + r'/../..')

import time
time1 = time.time()

from RFEM.enums import *
from RFEM.initModel import Model, ConvertToDlString, FirstFreeIdNumber, insertSpaces
from RFEM.BasicObjects.node import Node
from RFEM.BasicObjects.member import Member
from RFEM.dataTypes import inf

import MFE_ZoekNode
import MFE_getMembers
import MFE_getNodes

import math

EffLengthMembers = [[],[],[],[]]
EffLengthSets = [[],[],[],[]]
DesignPropsViaParentSet = bool

def BeamLimitCharacteristic(value: int = 100, sls_no = 1):

    with open(dirName+r"./sls_char.js", "w") as std:

        std.write("STEEL_DESIGN.steel_design_sls_configurations[{}].settings_ec3.property_sl_beam_limit_characteristic = {}".format(sls_no, value))

    Model.clientModel.service.run_script(dirName+r"./sls_char.js")

    os.remove(dirName+r"./sls_char.js")

print("T1 = " + str(time.time()-time1) + "s")
time1 = time.time()

if __name__ == '__main__':
    dy = 5.0 #float(input("H.o.h. afstand tussen assen // x-as [m]: "))
    dx = 5.0 #float(input("H.o.h. afstand tussen assen // y-as [m]: "))
    nx = 5 #int(input("Aantal assen in x-richting: "))
    ny = 4 #int(input("Aantal assen in y-richting: "))
    h = 6.5 #float(input("Hoogte hal incl. dakrand [m]: "))
    h_dr = 0.5 #float(input("Hoogte dakrand [m]: "))
    kst_kol = 2 #int(input("Aantal kniksteunen van de kolommen: "))
    nodes_frame = 2*(3+kst_kol)+ny-2
    members_frame = 2*(2+kst_kol)+ny-1
    sup_nodes = []
    b = (ny-1)*dy

    Model(False, "MFE_HAL")
    Model.clientModel.service.begin_modification()

    # Material(1, 'S235')
    # Section(1, 'HEA 240', 1, "Profiel Kolommen 1")
    # Section(2, 'HEA 200', 1, "Profiel Kolommen 2")
    # Section(3, 'IPE 400', 1, "Profiel Hoofdliggers")
    # Section(4, 'HEA 160', 1, "Profiel Dakliggers KOPSE GEVELS")
    # Section(5, 'HEA 140', 1, "Profiel Dakliggers LANGSGEVELS")
    # Section(6, 'HEA 120', 1, "Profiel Kipsteunen dak")
    # Section(7, 'HEA 100', 1, "Profiel Horizontale gevelliggers KOPSE GEVELS")
    # Section(8, 'HEA 100', 1, "Profiel Horizontale gevelliggers LANGSGEVELS")

    # Section(9, 'HEA 100', 1, "Profiel Dakrand Verticaal")
    # Section(10, 'HEA 100', 1, "Profiel Dakrand Horizontaal")

    print("T2 = " + str(time.time()-time1) + "s")
    time1 = time.time()

    #----------------------------------------------------------------------------
    #-                      WINDVERBANDEN TOEVOEGEN                             -
    #----------------------------------------------------------------------------


    nodes = MFE_getNodes.getNodes()             # met deze lijst kan je knopen opzoeken op basis van hun co√∂rdinaten
    members = MFE_getMembers.getMembers()       # met deze lijst kan je staven opzoeken op basis van hun begin- en eindknoop

    print("T3 = " + str(time.time()-time1) + "s")
    time1 = time.time()

    xyzxyzList = []

    for k in range(kst_kol+1):
        xyzxyzList.append([1*dx,0.0,k*(h-h_dr)/(kst_kol+1),2*dx,0.0,(k+1)*(h-h_dr)/(kst_kol+1)])
        xyzxyzList.append([2*dx,0.0,k*(h-h_dr)/(kst_kol+1),1*dx,0.0,(k+1)*(h-h_dr)/(kst_kol+1)])
        xyzxyzList.append([1*dx,b,k*(h-h_dr)/(kst_kol+1),2*dx,b,(k+1)*(h-h_dr)/(kst_kol+1)])
        xyzxyzList.append([2*dx,b,k*(h-h_dr)/(kst_kol+1),1*dx,b,(k+1)*(h-h_dr)/(kst_kol+1)])

    for m in xyzxyzList:
        Node1 = MFE_ZoekNode.ZoekNode(m[0],m[1],m[2],Model,nodes)
        Node2 = MFE_ZoekNode.ZoekNode(m[3],m[4],m[5],Model,nodes)
        Member(FirstFreeIdNumber(ObjectTypes.E_OBJECT_TYPE_MEMBER),Node1["no"],Node2["no"], math.radians(0), 6, 6)

    print(xyzxyzList)

    Node1 = MFE_ZoekNode.ZoekNode(5,5,6,Model,nodes) #VOORBEELD van het zoeken van een knoop
    Node2 = MFE_ZoekNode.ZoekNode(5,10,6,Model,nodes) #VOORBEELD van het zoeken van een knoop

    print(Node1["no"])
    print(Node2["no"])


#TODO: elif toevoegen dat er nog wel horizontale gevelliggers en dakrandligger moeten worden tegevoegd als ny=2

    Model.clientModel.service.finish_modification()